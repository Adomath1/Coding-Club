import turtle
import time
import random

# Set up the screen
win = turtle.Screen()
win.title("Snake Game")
win.bgcolor("black")
win.setup(width=600, height=600)
win.tracer(0)  # Turns off the screen updates

# Create the snake
snake = []
for _ in range(3):
    segment = turtle.Turtle("square")
    segment.color("white")
    segment.penup()
    snake.append(segment)

# Create the food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)

def move():
    for index in range(len(snake) - 1, 0, -1):
        x = snake[index - 1].xcor()
        y = snake[index - 1].ycor()
        snake[index].goto(x, y)
    if len(snake) > 0:
        x = snake[0].xcor()
        y = snake[0].ycor()
        if direction == "up":
            snake[0].sety(y + 20)
        if direction == "down":
            snake[0].sety(y - 20)
        if direction == "left":
            snake[0].setx(x - 20)
        if direction == "right":
            snake[0].setx(x + 20)

def go_up():
    global direction
    if direction != "down":
        direction = "up"

def go_down():
    global direction
    if direction != "up":
        direction = "down"

def go_left():
    global direction
    if direction != "right":
        direction = "left"

def go_right():
    global direction
    if direction != "left":
        direction = "right"

# Keyboard bindings
win.listen()
win.onkey(go_up, "Up")
win.onkey(go_down, "Down")
win.onkey(go_left, "Left")
win.onkey(go_right, "Right")

direction = "stop"

# Main game loop
while True:
    win.update()

    # Check for collision with the border
    if snake[0].xcor() > 290 or snake[0].xcor() < -290 or snake[0].ycor() > 290 or snake[0].ycor() < -290:
        time.sleep(1)
        for segment in snake:
            segment.goto(1000, 1000)  # Move off screen
        snake.clear()
        for _ in range(3):  # Create a new snake
            segment = turtle.Turtle("square")
            segment.color("white")
            segment.penup()
            snake.append(segment)
        direction = "stop"
        food.goto(0, 100)

    # Check for collision with the food
    if snake[0].distance(food) < 20:
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        segment = turtle.Turtle("square")
        segment.color("white")
        segment.penup()
        snake.append(segment)

    move()

    # Check for collision with itself
    for segment in snake[1:]:
        if segment.distance(snake[0]) < 20:
            time.sleep(1)
            for segment in snake:
                segment.goto(1000, 1000)  # Move off screen
            snake.clear()
            for _ in range(3):  # Create a new snake
                segment = turtle.Turtle("square")
                segment.color("white")
                segment.penup()
                snake.append(segment)
            direction = "stop"
            food.goto(0, 100)

    time.sleep(0.1)

